"use strict";
//decorators
function validate(validatableInput) {
    var isValid = true;
    if (validatableInput.required) {
        isValid = isValid && validatableInput.value.toString().trim().length !== 0;
    }
    if (validatableInput.minLength != null) {
        isValid =
            isValid &&
                validatableInput.value.toString().trim().length >=
                    validatableInput.minLength;
    }
    if (validatableInput.maxLength != null) {
        isValid =
            isValid &&
                validatableInput.value.toString().trim().length <=
                    validatableInput.maxLength;
    }
    if (validatableInput.minValue != null) {
        isValid = isValid && validatableInput.value >= validatableInput.minValue;
    }
    if (validatableInput.maxValue != null) {
        isValid = isValid && validatableInput.value <= validatableInput.maxValue;
    }
    return isValid;
}
function autobind(_, _2, descriptor) {
    var originalMethod = descriptor.value;
    var adjDescriptor = {
        configurable: true,
        get: function () {
            var boundFn = originalMethod.bind(this);
            return boundFn;
        },
    };
    return adjDescriptor;
}
//make singleton
var ProjectInput = /** @class */ (function () {
    function ProjectInput() {
        this.hostElement = document.getElementById("app");
        this.formTemplate = document.getElementById("project-input");
        var formNode = document.importNode(this.formTemplate.content, true);
        this.formElement = formNode.firstElementChild;
        this.formElement.id = "user-input";
        this.titleInputElement = this.formElement.querySelector("#title");
        this.descriptionInputElement = this.formElement.querySelector("#description");
        this.valueInputElement = this.formElement.querySelector("#people");
        this.hostElement.appendChild(this.formElement);
        this.formElement.addEventListener("submit", this.submitHandler.bind(this));
    }
    ProjectInput.prototype.submitHandler = function (event) {
        event.preventDefault();
        var project = new Project(this.titleInputElement.value, this.descriptionInputElement.value, +this.valueInputElement.value);
        var projectValidation = projects.addProject(project);
        if (projectValidation) {
            this.titleInputElement.value = "";
            this.descriptionInputElement.value = "";
            this.valueInputElement.value = "";
        }
        else {
            alert("invlaid input: " + "Invalid input");
        }
    };
    return ProjectInput;
}());
var ProjectList = /** @class */ (function () {
    function ProjectList(type) {
        var _this = this;
        this.type = type;
        this.hostElement = document.getElementById("app");
        this.projectListTemplate = document.getElementById("project-list");
        var projectListNode = document.importNode(this.projectListTemplate.content, true);
        this.projectListElement = projectListNode.firstElementChild;
        this.assignedProjects = [];
        this.projectListElement.id = this.type.toLowerCase() + "-post-it";
        this.projectListElement.querySelector("h2").textContent = type;
        this.hostElement.appendChild(this.projectListElement);
        projects.addListener(function (p) {
            _this.assignedProjects = p;
            _this.renderProjects();
        });
    }
    ProjectList.prototype.renderProjects = function () {
        var listEl = document.getElementById(this.type.toLocaleLowerCase() + "-post-it");
        for (var _i = 0, _a = this.assignedProjects; _i < _a.length; _i++) {
            var projectItem = _a[_i];
            var listItem = document.createElement("li");
            listItem.textContent = projectItem.title;
            listEl.appendChild(listItem);
        }
    };
    return ProjectList;
}());
var Project = /** @class */ (function () {
    function Project(t, d, v) {
        this.title = t.trim();
        this.description = d.trim();
        this.value = v;
        this.id = Math.random();
    }
    return Project;
}());
var Projects = /** @class */ (function () {
    function Projects() {
        this.listeners = [];
        this.projectList = [];
    }
    Projects.getInstance = function () {
        if (this._Projects) {
            return this._Projects;
        }
        this._Projects = new Projects();
        return this._Projects;
    };
    Projects.prototype.addListener = function (listenerFn) {
        this.listeners.push(listenerFn);
    };
    Projects.prototype.addProject = function (project) {
        var validation = this.Validation(project);
        if (validation) {
            this.hostElement = document.getElementById("unsorted-post-it");
            this.projectTemplate = document.getElementById("post-it");
            var projectNode = document.importNode(this.projectTemplate.content, true);
            this.projectElement = projectNode.firstElementChild;
            this.projectElement.innerText = project.title + " - " + project.description + " - " + project.value;
            this.hostElement.appendChild(this.projectElement);
            this.projectList.push(project);
            for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) {
                var listenerFn = _a[_i];
                listenerFn(this.projectList.slice());
            }
        }
        return validation;
    };
    Projects.prototype.Validation = function (project) {
        var titleValidatable = {
            value: project.title,
            required: true,
            minLength: 1,
            maxLength: 50,
        };
        var descriptionValidatable = {
            value: project.description,
            required: true,
            minLength: 1,
            maxLength: 200,
        };
        var valueValidatable = {
            value: project.value,
            required: false,
            minValue: 0,
            maxValue: 99,
        };
        if (!validate(titleValidatable) ||
            !validate(descriptionValidatable) ||
            !validate(valueValidatable)) {
            return false;
        }
        return true;
    };
    return Projects;
}());
var projects = Projects.getInstance();
var projectInput = new ProjectInput();
var projectList0 = new ProjectList("Unsorted"); //project state instead?
var projectList = new ProjectList("Start");
var projectList2 = new ProjectList("Continue");
var projectList3 = new ProjectList("Stop");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Ii9zcmMvIiwic291cmNlcyI6WyJhcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVk7QUFZWixTQUFTLFFBQVEsQ0FBQyxnQkFBNkI7SUFDN0MsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDO0lBRW5CLElBQUksZ0JBQWdCLENBQUMsUUFBUSxFQUFFO1FBQzdCLE9BQU8sR0FBRyxPQUFPLElBQUksZ0JBQWdCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7S0FDNUU7SUFFRCxJQUFJLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7UUFDdEMsT0FBTztZQUNMLE9BQU87Z0JBQ1AsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU07b0JBQzdDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQztLQUNoQztJQUVELElBQUksZ0JBQWdCLENBQUMsU0FBUyxJQUFJLElBQUksRUFBRTtRQUN0QyxPQUFPO1lBQ0wsT0FBTztnQkFDUCxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTTtvQkFDN0MsZ0JBQWdCLENBQUMsU0FBUyxDQUFDO0tBQ2hDO0lBRUQsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO1FBQ3JDLE9BQU8sR0FBRyxPQUFPLElBQUksZ0JBQWdCLENBQUMsS0FBSyxJQUFJLGdCQUFnQixDQUFDLFFBQVEsQ0FBQztLQUMxRTtJQUVELElBQUksZ0JBQWdCLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtRQUNyQyxPQUFPLEdBQUcsT0FBTyxJQUFJLGdCQUFnQixDQUFDLEtBQUssSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7S0FDMUU7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxR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QSxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0gsZUFBQztBQUFELENBQUMsQUF4RkQsSUF3RkM7QUFFRCxJQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7QUFFeEMsSUFBTSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztBQUN4QyxJQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLHdCQUF3QjtBQUMxRSxJQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3QyxJQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqRCxJQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vZGVjb3JhdG9yc1xyXG5cclxuaW50ZXJmYWNlIFZhbGlkYXRhYmxlIHtcclxuICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xyXG4gIHJlcXVpcmVkPzogYm9vbGVhbjtcclxuICBtaW5MZW5ndGg/OiBudW1iZXI7XHJcbiAgbWF4TGVuZ3RoPzogbnVtYmVyO1xyXG5cclxuICBtaW5WYWx1ZT86IG51bWJlcjtcclxuICBtYXhWYWx1ZT86IG51bWJlcjtcclxufVxyXG5cclxuZnVuY3Rpb24gdmFsaWRhdGUodmFsaWRhdGFibGVJbnB1dDogVmFsaWRhdGFibGUpOiBib29sZWFuIHtcclxuICBsZXQgaXNWYWxpZCA9IHRydWU7XHJcblxyXG4gIGlmICh2YWxpZGF0YWJsZUlucHV0LnJlcXVpcmVkKSB7XHJcbiAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCAhPT0gMDtcclxuICB9XHJcblxyXG4gIGlmICh2YWxpZGF0YWJsZUlucHV0Lm1pbkxlbmd0aCAhPSBudWxsKSB7XHJcbiAgICBpc1ZhbGlkID1cclxuICAgICAgaXNWYWxpZCAmJlxyXG4gICAgICB2YWxpZGF0YWJsZUlucHV0LnZhbHVlLnRvU3RyaW5nKCkudHJpbSgpLmxlbmd0aCA+PVxyXG4gICAgICAgIHZhbGlkYXRhYmxlSW5wdXQubWluTGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgaWYgKHZhbGlkYXRhYmxlSW5wdXQubWF4TGVuZ3RoICE9IG51bGwpIHtcclxuICAgIGlzVmFsaWQgPVxyXG4gICAgICBpc1ZhbGlkICYmXHJcbiAgICAgIHZhbGlkYXRhYmxlSW5wdXQudmFsdWUudG9TdHJpbmcoKS50cmltKCkubGVuZ3RoIDw9XHJcbiAgICAgICAgdmFsaWRhdGFibGVJbnB1dC5tYXhMZW5ndGg7XHJcbiAgfVxyXG5cclxuICBpZiAodmFsaWRhdGFibGVJbnB1dC5taW5WYWx1ZSAhPSBudWxsKSB7XHJcbiAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlID49IHZhbGlkYXRhYmxlSW5wdXQubWluVmFsdWU7XHJcbiAgfVxyXG5cclxuICBpZiAodmFsaWRhdGFibGVJbnB1dC5tYXhWYWx1ZSAhPSBudWxsKSB7XHJcbiAgICBpc1ZhbGlkID0gaXNWYWxpZCAmJiB2YWxpZGF0YWJsZUlucHV0LnZhbHVlIDw9IHZhbGlkYXRhYmxlSW5wdXQubWF4VmFsdWU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gaXNWYWxpZDtcclxufVxyXG5cclxuZnVuY3Rpb24gYXV0b2JpbmQoXzogYW55LCBfMjogc3RyaW5nLCBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IpIHtcclxuICBjb25zdCBvcmlnaW5hbE1ldGhvZCA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgY29uc3QgYWRqRGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yID0ge1xyXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgZ2V0KCkge1xyXG4gICAgICBjb25zdCBib3VuZEZuID0gb3JpZ2luYWxNZXRob2QuYmluZCh0aGlzKTtcclxuICAgICAgcmV0dXJuIGJvdW5kRm47XHJcbiAgICB9LFxyXG4gIH07XHJcbiAgcmV0dXJuIGFkakRlc2NyaXB0b3I7XHJcbn1cclxuXHJcbi8vbWFrZSBzaW5nbGV0b25cclxuY2xhc3MgUHJvamVjdElucHV0IHtcclxuICBob3N0RWxlbWVudDogSFRNTERpdkVsZW1lbnQ7XHJcbiAgZm9ybVRlbXBsYXRlOiBIVE1MVGVtcGxhdGVFbGVtZW50O1xyXG4gIGZvcm1FbGVtZW50OiBIVE1MRm9ybUVsZW1lbnQ7XHJcblxyXG4gIHRpdGxlSW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIGRlc2NyaXB0aW9uSW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xyXG4gIHZhbHVlSW5wdXRFbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuaG9zdEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKSEgYXMgSFRNTERpdkVsZW1lbnQ7XHJcbiAgICB0aGlzLmZvcm1UZW1wbGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcInByb2plY3QtaW5wdXRcIlxyXG4gICAgKSEgYXMgSFRNTFRlbXBsYXRlRWxlbWVudDtcclxuXHJcbiAgICBjb25zdCBmb3JtTm9kZSA9IGRvY3VtZW50LmltcG9ydE5vZGUodGhpcy5mb3JtVGVtcGxhdGUuY29udGVudCwgdHJ1ZSk7XHJcbiAgICB0aGlzLmZvcm1FbGVtZW50ID0gZm9ybU5vZGUuZmlyc3RFbGVtZW50Q2hpbGQgYXMgSFRNTEZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5mb3JtRWxlbWVudC5pZCA9IFwidXNlci1pbnB1dFwiO1xyXG5cclxuICAgIHRoaXMudGl0bGVJbnB1dEVsZW1lbnQgPSB0aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI3RpdGxlXCJcclxuICAgICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQgPSB0aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI2Rlc2NyaXB0aW9uXCJcclxuICAgICkgYXMgSFRNTElucHV0RWxlbWVudDtcclxuICAgIHRoaXMudmFsdWVJbnB1dEVsZW1lbnQgPSB0aGlzLmZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgIFwiI3Blb3BsZVwiXHJcbiAgICApIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XHJcblxyXG4gICAgdGhpcy5ob3N0RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmZvcm1FbGVtZW50KTtcclxuXHJcbiAgICB0aGlzLmZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgdGhpcy5zdWJtaXRIYW5kbGVyLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdWJtaXRIYW5kbGVyKGV2ZW50OiBFdmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBjb25zdCBwcm9qZWN0ID0gbmV3IFByb2plY3QoXHJcbiAgICAgIHRoaXMudGl0bGVJbnB1dEVsZW1lbnQudmFsdWUsXHJcbiAgICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQudmFsdWUsXHJcbiAgICAgICt0aGlzLnZhbHVlSW5wdXRFbGVtZW50LnZhbHVlXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IHByb2plY3RWYWxpZGF0aW9uID0gcHJvamVjdHMuYWRkUHJvamVjdChwcm9qZWN0KTtcclxuXHJcbiAgICBpZiAocHJvamVjdFZhbGlkYXRpb24pIHtcclxuICAgICAgdGhpcy50aXRsZUlucHV0RWxlbWVudC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgIHRoaXMuZGVzY3JpcHRpb25JbnB1dEVsZW1lbnQudmFsdWUgPSBcIlwiO1xyXG4gICAgICB0aGlzLnZhbHVlSW5wdXRFbGVtZW50LnZhbHVlID0gXCJcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFsZXJ0KGBpbnZsYWlkIGlucHV0OiAke1wiSW52YWxpZCBpbnB1dFwifWApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgUHJvamVjdExpc3Qge1xyXG4gIGhvc3RFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuICBwcm9qZWN0TGlzdFRlbXBsYXRlOiBIVE1MVGVtcGxhdGVFbGVtZW50O1xyXG4gIHByb2plY3RMaXN0RWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgdHlwZTogXCJTdGFydFwiIHwgXCJDb250aW51ZVwiIHwgXCJTdG9wXCIgfCBcIlVuc29ydGVkXCI7XHJcbiAgYXNzaWduZWRQcm9qZWN0czogYW55W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHR5cGU6IFwiU3RhcnRcIiB8IFwiQ29udGludWVcIiB8IFwiU3RvcFwiIHwgXCJVbnNvcnRlZFwiKSB7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5ob3N0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpISBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgIHRoaXMucHJvamVjdExpc3RUZW1wbGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBcInByb2plY3QtbGlzdFwiXHJcbiAgICApISBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xyXG5cclxuICAgIGNvbnN0IHByb2plY3RMaXN0Tm9kZSA9IGRvY3VtZW50LmltcG9ydE5vZGUoXHJcbiAgICAgIHRoaXMucHJvamVjdExpc3RUZW1wbGF0ZS5jb250ZW50LFxyXG4gICAgICB0cnVlXHJcbiAgICApO1xyXG4gICAgdGhpcy5wcm9qZWN0TGlzdEVsZW1lbnQgPSBwcm9qZWN0TGlzdE5vZGUuZmlyc3RFbGVtZW50Q2hpbGQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICB0aGlzLmFzc2lnbmVkUHJvamVjdHMgPSBbXTtcclxuXHJcbiAgICB0aGlzLnByb2plY3RMaXN0RWxlbWVudC5pZCA9IGAke3RoaXMudHlwZS50b0xvd2VyQ2FzZSgpfS1wb3N0LWl0YDtcclxuICAgIHRoaXMucHJvamVjdExpc3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJoMlwiKSEudGV4dENvbnRlbnQgPSB0eXBlO1xyXG4gICAgdGhpcy5ob3N0RWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnByb2plY3RMaXN0RWxlbWVudCk7XHJcblxyXG4gICAgcHJvamVjdHMuYWRkTGlzdGVuZXIoKHA6IGFueVtdKSA9PiB7XHJcbiAgICAgIHRoaXMuYXNzaWduZWRQcm9qZWN0cyA9IHA7XHJcbiAgICAgIHRoaXMucmVuZGVyUHJvamVjdHMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW5kZXJQcm9qZWN0cygpIHtcclxuICAgIGNvbnN0IGxpc3RFbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICBgJHt0aGlzLnR5cGUudG9Mb2NhbGVMb3dlckNhc2UoKX0tcG9zdC1pdGBcclxuICAgICkhO1xyXG4gICAgZm9yIChjb25zdCBwcm9qZWN0SXRlbSBvZiB0aGlzLmFzc2lnbmVkUHJvamVjdHMpIHtcclxuICAgICAgY29uc3QgbGlzdEl0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XHJcbiAgICAgIGxpc3RJdGVtLnRleHRDb250ZW50ID0gcHJvamVjdEl0ZW0udGl0bGU7XHJcbiAgICAgIGxpc3RFbC5hcHBlbmRDaGlsZChsaXN0SXRlbSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jbGFzcyBQcm9qZWN0IHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICB2YWx1ZTogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih0OiBzdHJpbmcsIGQ6IHN0cmluZywgdjogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnRpdGxlID0gdC50cmltKCk7XHJcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZC50cmltKCk7XHJcbiAgICB0aGlzLnZhbHVlID0gdjtcclxuICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgUHJvamVjdHMge1xyXG4gIHByaXZhdGUgbGlzdGVuZXJzOiBhbnlbXSA9IFtdO1xyXG5cclxuICBwcm9qZWN0TGlzdDogUHJvamVjdFtdID0gW107XHJcblxyXG4gIGhvc3RFbGVtZW50PzogSFRNTEVsZW1lbnQ7XHJcbiAgcHJvamVjdFRlbXBsYXRlPzogSFRNTFRlbXBsYXRlRWxlbWVudDtcclxuICBwcm9qZWN0RWxlbWVudD86IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIHN0YXRpYyBfUHJvamVjdHM6IFByb2plY3RzO1xyXG5cclxuICBwcml2YXRlIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgaWYgKHRoaXMuX1Byb2plY3RzKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9Qcm9qZWN0cztcclxuICAgIH1cclxuICAgIHRoaXMuX1Byb2plY3RzID0gbmV3IFByb2plY3RzKCk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuX1Byb2plY3RzO1xyXG4gIH1cclxuXHJcbiAgYWRkTGlzdGVuZXIobGlzdGVuZXJGbjogRnVuY3Rpb24pIHtcclxuICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXJGbik7XHJcbiAgfVxyXG5cclxuICBhZGRQcm9qZWN0KHByb2plY3Q6IFByb2plY3QpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLlZhbGlkYXRpb24ocHJvamVjdCk7XHJcblxyXG4gICAgaWYgKHZhbGlkYXRpb24pIHtcclxuICAgICAgdGhpcy5ob3N0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxyXG4gICAgICAgIFwidW5zb3J0ZWQtcG9zdC1pdFwiXHJcbiAgICAgICkhIGFzIEhUTUxFbGVtZW50O1xyXG5cclxuICAgICAgdGhpcy5wcm9qZWN0VGVtcGxhdGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcclxuICAgICAgICBcInBvc3QtaXRcIlxyXG4gICAgICApISBhcyBIVE1MVGVtcGxhdGVFbGVtZW50O1xyXG5cclxuICAgICAgY29uc3QgcHJvamVjdE5vZGUgPSBkb2N1bWVudC5pbXBvcnROb2RlKFxyXG4gICAgICAgIHRoaXMucHJvamVjdFRlbXBsYXRlLmNvbnRlbnQsXHJcbiAgICAgICAgdHJ1ZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5wcm9qZWN0RWxlbWVudCA9IHByb2plY3ROb2RlLmZpcnN0RWxlbWVudENoaWxkIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICB0aGlzLnByb2plY3RFbGVtZW50LmlubmVyVGV4dCA9IGAke3Byb2plY3QudGl0bGV9IC0gJHtwcm9qZWN0LmRlc2NyaXB0aW9ufSAtICR7cHJvamVjdC52YWx1ZX1gO1xyXG4gICAgICB0aGlzLmhvc3RFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMucHJvamVjdEVsZW1lbnQpO1xyXG5cclxuICAgICAgdGhpcy5wcm9qZWN0TGlzdC5wdXNoKHByb2plY3QpO1xyXG5cclxuICAgICAgZm9yIChjb25zdCBsaXN0ZW5lckZuIG9mIHRoaXMubGlzdGVuZXJzKSB7XHJcbiAgICAgICAgbGlzdGVuZXJGbih0aGlzLnByb2plY3RMaXN0LnNsaWNlKCkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbGlkYXRpb247XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIFZhbGlkYXRpb24ocHJvamVjdDogUHJvamVjdCk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgdGl0bGVWYWxpZGF0YWJsZTogVmFsaWRhdGFibGUgPSB7XHJcbiAgICAgIHZhbHVlOiBwcm9qZWN0LnRpdGxlLFxyXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcclxuICAgICAgbWluTGVuZ3RoOiAxLFxyXG4gICAgICBtYXhMZW5ndGg6IDUwLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBkZXNjcmlwdGlvblZhbGlkYXRhYmxlOiBWYWxpZGF0YWJsZSA9IHtcclxuICAgICAgdmFsdWU6IHByb2plY3QuZGVzY3JpcHRpb24sXHJcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxyXG4gICAgICBtaW5MZW5ndGg6IDEsXHJcbiAgICAgIG1heExlbmd0aDogMjAwLFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB2YWx1ZVZhbGlkYXRhYmxlOiBWYWxpZGF0YWJsZSA9IHtcclxuICAgICAgdmFsdWU6IHByb2plY3QudmFsdWUsXHJcbiAgICAgIHJlcXVpcmVkOiBmYWxzZSxcclxuICAgICAgbWluVmFsdWU6IDAsXHJcbiAgICAgIG1heFZhbHVlOiA5OSxcclxuICAgIH07XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAhdmFsaWRhdGUodGl0bGVWYWxpZGF0YWJsZSkgfHxcclxuICAgICAgIXZhbGlkYXRlKGRlc2NyaXB0aW9uVmFsaWRhdGFibGUpIHx8XHJcbiAgICAgICF2YWxpZGF0ZSh2YWx1ZVZhbGlkYXRhYmxlKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcHJvamVjdHMgPSBQcm9qZWN0cy5nZXRJbnN0YW5jZSgpO1xyXG5cclxuY29uc3QgcHJvamVjdElucHV0ID0gbmV3IFByb2plY3RJbnB1dCgpO1xyXG5jb25zdCBwcm9qZWN0TGlzdDAgPSBuZXcgUHJvamVjdExpc3QoXCJVbnNvcnRlZFwiKTsgLy9wcm9qZWN0IHN0YXRlIGluc3RlYWQ/XHJcbmNvbnN0IHByb2plY3RMaXN0ID0gbmV3IFByb2plY3RMaXN0KFwiU3RhcnRcIik7XHJcbmNvbnN0IHByb2plY3RMaXN0MiA9IG5ldyBQcm9qZWN0TGlzdChcIkNvbnRpbnVlXCIpO1xyXG5jb25zdCBwcm9qZWN0TGlzdDMgPSBuZXcgUHJvamVjdExpc3QoXCJTdG9wXCIpO1xyXG4iXX0=